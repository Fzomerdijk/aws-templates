{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "SSH Bastion Host in AutoScaling Group - AWS Linux - amzn-ami-hvm-2018.03.0.20180622-x86_64-gp2 - v1.5 Amazon Linux AMI 2018.03 ",

  "Metadata": {
      "AWS::CloudFormation::Interface": {
          "ParameterGroups": [
              {
                  "Label": {
                      "default": "Network Configuration"
                  },
                  "Parameters": [
                      "aEnvironmentType",
                      "classB",
                      "dIpRangeForEC2InstSSH"
                  ]      
              },
              {
                  "Label": {
                      "default": "Instance Configuration"
                  },
                  "Parameters": [
                      "eKeyPair",
                      "InstanceType",
                      "EnableCpuUnlimited",
                      "jLogsRetentionInDays",
                      "kEnableSudoOnBastionHost"
                  ]
              },
              {
                  "Label": {
                      "default": "Notification"
                  },
                  "Parameters": [
                      "yEmailAdres"
                  ]
              },
              {
                  "Label": {
                      "default": "Tagging AWS Resources"
                  },
                  "Parameters": [
                      "zDeveloperName"
                  ]
              }
          ],       
          "ParameterLabels": {
              "aEnvironmentType": {
                  "default": "Environment Type"
              },
              "classB": {
                  "default": "ClassB subnet number"
              },
              "dIpRangeForEC2InstSSH": {
                  "default": "SSH ip Range"
              },
              "eKeyPair": {
                  "default": "EC2 Keypair"
              },
              "InstanceType": {
                  "default": "Instance type"
              },
              "EnableCpuUnlimited": {
                "default": "Enable T2 CPU Unlimited burst"
              },              
              "jLogsRetentionInDays": {
                  "default": "Log retention in days"
              },
              "kEnableSudoOnBastionHost": {
                  "default": "Enable Sudo"
              },
              "yEmailAdres": {
                  "default": "Notification E-mail address"
              },
              "zDeveloperName": {
                  "default": ""
              }
          }
      }
  },

  
  "Parameters": {

    "aEnvironmentType": {
      "Type": "String",
      "Default": "Dev",
      "AllowedValues": ["Dev", "Acc", "PROD"],
      "Description": "Type of the VPC and subnets"
    },

    "classB": {
        "Description": "Class B of VPC (10.xxx.0.0/16)",
        "Type": "String",
        "MinLength": "1",
        "MaxLength": "3",
        "Default": "..."
    },
    
    "dIpRangeForEC2InstSSH": {
      "Description": "IP range to allow SSH to the Bastion Host",
      "Type": "String",
      "Default": "84.207.225.38/32",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$"
    },
    
    "eKeyPair": {
        "Description": "Amazon SSH Key Pair (EC2 instances)",
        "Type": "AWS::EC2::KeyPair::KeyName"
    },
    
    "InstanceType": {
      "Type": "String",
      "Description": "Instance type of the SSH Bastion Host.",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.nano",
        "t2.micro",
        "t2.medium",
        "t2.large"
      ],
      "ConstraintDescription": "choose a valid T2 EC2 instance type."
    },

    "EnableCpuUnlimited": {
      "Type": "String",
      "Description": "Should we enable CPU Unlimited burst (ony on T2 instance types) ?",
      "Default": "No",
      "AllowedValues": ["No", "Yes"]
    },
    
    "jLogsRetentionInDays": {
      "Description": "Specifies the number of days you want to retain log events",
      "Type": "Number",
      "AllowedValues": [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653],
      "Default": 14
    },

    "kEnableSudoOnBastionHost": {
      "Type": "String",
      "Description": "Should we enable SUDO on Bastion Host?",
      "Default": "No",
      "AllowedValues": ["No", "Yes"]
    },


    "yEmailAdres": {
      "Type": "String",
      "Default": "someone@yourdomain.com",      
      "AllowedPattern": "^[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$",
      "ConstraintDescription": "must be a valid email address",      
      "Description": "The E-Mail adres to send scaling notifications to."
    },
    
    "zDeveloperName": {
      "Type": "String",
      "MinLength": "2",
      "Description": "Your name, saved with created resources."
    }    
    
  },
  
  "Mappings": {
    "RegionMap": {
      "ap-northeast-1": {"AMI": "ami-9c9443e3"}, 
      "ap-northeast-2": {"AMI": "ami-ebc47185"}, 
      "ap-northeast-3": {"AMI": "ami-09b8b674"}, 
      "ap-south-1": {"AMI": "ami-5a8da735"}, 
      "ap-southeast-1": {"AMI": "ami-ed838091"}, 
      "ap-southeast-2": {"AMI": "ami-33f92051"}, 
      "ca-central-1": {"AMI": "ami-03e86a67"}, 
      "eu-central-1": {"AMI": "ami-a058674b"}, 
      "eu-west-1": {"AMI": "ami-e4515e0e"}, 
      "eu-west-2": {"AMI": "ami-b2b55cd5"}, 
      "eu-west-3": {"AMI": "ami-d50bbaa8"}, 
      "sa-east-1": {"AMI": "ami-83d58fef"}, 
      "us-east-1": {"AMI": "ami-cfe4b2b0"}, 
      "us-east-2": {"AMI": "ami-40142d25"}, 
      "us-west-1": {"AMI": "ami-0e86606d"}, 
      "us-west-2": {"AMI": "ami-0ad99772"}   
    }
  },
  
  "Conditions": {
    "HasKeyPair": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "eKeyPair"}]}]},
    "disableSudo": {"Fn::Equals": ["No", {"Ref": "kEnableSudoOnBastionHost"}]},
    "setCpuUnlimited": {"Fn::Equals": ["Yes", {"Ref": "EnableCpuUnlimited"}]}
  },
  
  "Resources": {
  
    "EIP": {    
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": {"Fn::ImportValue": {"Fn::Join": [ "-", [{"Ref": "aEnvironmentType"}, "VPC", {"Ref": "classB"}]]}}
      }
    },
    
    "Logs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": {"Ref": "jLogsRetentionInDays"}
      }
    },
    
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": {"Fn::Join": [" - ", [{"Ref": "aEnvironmentType"}, "SSH Bastion Host SG ", {"Ref": "classB"}]]},
        "VpcId": {"Fn::ImportValue": {"Fn::Join": [ "-", [{"Ref": "aEnvironmentType"}, "VPC", {"Ref": "classB"}]]}},
        "SecurityGroupEgress": [
          { "IpProtocol": "tcp", "FromPort": "0", "ToPort": "65535", "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "udp", "FromPort": "0", "ToPort": "65535", "CidrIp": "0.0.0.0/0" }
        ],
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "22",   "ToPort": "22",  "CidrIp": { "Ref": "dIpRangeForEC2InstSSH" } }
        ],
        "Tags": [
          { "Key": "Name", "Value": {"Fn::Join": [ " ", [ {"Ref": "aEnvironmentType"}, "SSH Bastion Host SG", {"Ref": "classB"}]]} },
          { "Key": "Owner","Value": "Cloudformation"},
          { "Key": "Developer","Value": {"Ref": "zDeveloperName"} },
          { "Key": "Environment", "Value": {"Ref": "aEnvironmentType"} }
        ]
      }
    },
    
    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "DependsOn": "IAMRole",
      "Properties": {
        "Path": "/",
        "Roles": [{"Ref": "IAMRole"}]
      }
    },
    
    "IAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["ec2.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "ec2",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [ "ec2:AssociateAddress" ],
              "Resource": [ "*" ]
            }]
          }
        }, 
        {
          "PolicyName": "logs",
          "PolicyDocument":{
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams"
              ],
              "Resource": [ "arn:aws:logs:*:*:*" ]
            }]
          }
        }, 
        { 
          "PolicyName": "ChangeInstanceCreditSpecifications", 
          "PolicyDocument" : {
            "Version": "2012-10-17",
            "Statement": [ {
                "Effect": "Allow",
                "Action": [
                  "ec2:DescribeInstanceCreditSpecifications",
                  "ec2:ModifyInstanceCreditSpecification"
                ],
                "Resource": "*"
            } ]
          }
        }]
      }
    },
    
    
    "LaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn": [ "SecurityGroup", "InstanceProfile" ],
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": ["config"]
          },
          "config": {
            "packages": {
              "yum": {
                "awslogs": []
              }
            },
            "files": {
              "/etc/awslogs/awscli.conf": {
                "content": {"Fn::Join": ["", [
                  "[default]", "\n",
                  "region = ", {"Ref": "AWS::Region"}, "\n",
                  "\n",
                  "[plugins]", "\n",
                  "cwlogs = cwlogs", "\n"
                ]]},
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/awslogs/awslogs.conf": {
                "content": {"Fn::Join": ["", [
                  "[general]", "\n",
                  "state_file = /var/lib/awslogs/agent-state", "\n",
                  "\n",
                  "[/var/log/messages]", "\n",
                  "datetime_format = %b %d %H:%M:%S", "\n",
                  "file = /var/log/messages", "\n",
                  "log_stream_name = {instance_id}/var/log/messages", "\n",
                  "log_group_name = ", {"Ref": "Logs"}, "\n",
                  "\n",
                  "[/var/log/secure]", "\n",
                  "datetime_format = %b %d %H:%M:%S", "\n",
                  "file = /var/log/secure", "\n",
                  "log_stream_name = {instance_id}/var/log/secure", "\n",
                  "log_group_name = ", {"Ref": "Logs"}, "\n",
                  "\n",
                  "[/var/log/cron]", "\n",
                  "datetime_format = %b %d %H:%M:%S", "\n",
                  "file = /var/log/cron", "\n",
                  "log_stream_name = {instance_id}/var/log/cron", "\n",
                  "log_group_name = ", {"Ref": "Logs"}, "\n",
                  "\n",
                  "[/var/log/crontab.log]", "\n",
                  "datetime_format = %b %d %H:%M:%S", "\n",
                  "file = /var/log/crontab.log", "\n",
                  "log_stream_name = {instance_id}/var/log/crontab.log", "\n",
                  "log_group_name = ", {"Ref": "Logs"}, "\n",
                  "\n",
                  "[/var/log/cloud-init.log]", "\n",
                  "datetime_format = %b %d %H:%M:%S", "\n",
                  "file = /var/log/cloud-init.log", "\n",
                  "log_stream_name = {instance_id}/var/log/cloud-init.log", "\n",
                  "log_group_name = ", {"Ref": "Logs"}, "\n",
                  "\n",
                  "[/var/log/cfn-init.log]", "\n",
                  "datetime_format = %Y-%m-%d %H:%M:%S", "\n",
                  "file = /var/log/cfn-init.log", "\n",
                  "log_stream_name = {instance_id}/var/log/cfn-init.log", "\n",
                  "log_group_name = ", {"Ref": "Logs"}, "\n",
                  "\n",
                  "[/var/log/cfn-hup.log]", "\n",
                  "datetime_format = %Y-%m-%d %H:%M:%S", "\n",
                  "file = /var/log/cfn-hup.log", "\n",
                  "log_stream_name = {instance_id}/var/log/cfn-hup.log", "\n",
                  "log_group_name = ", {"Ref": "Logs"}, "\n",
                  "\n",
                  "[/var/log/cfn-init-cmd.log]", "\n",
                  "datetime_format = %Y-%m-%d %H:%M:%S", "\n",
                  "file = /var/log/cfn-init-cmd.log", "\n",
                  "log_stream_name = {instance_id}/var/log/cfn-init-cmd.log", "\n",
                  "log_group_name = ", {"Ref": "Logs"}, "\n",
                  "\n",
                  "[/var/log/cloud-init-output.log]", "\n",
                  "file = /var/log/cloud-init-output.log", "\n",
                  "log_stream_name = {instance_id}/var/log/cloud-init-output.log", "\n",
                  "log_group_name = ", {"Ref": "Logs"}, "\n",
                  "\n",
                  "[/var/log/dmesg]", "\n",
                  "file = /var/log/dmesg", "\n",
                  "log_stream_name = {instance_id}/var/log/dmesg", "\n",
                  "log_group_name = ", {"Ref": "Logs"}, "\n",
                  "\n"
                ]]},
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/cfn-hup.conf": {
                "content": {"Fn::Join": ["", [
                  "[main]", "\n",
                  "stack=", {"Ref": "AWS::StackId"}, "\n",
                  "region=", {"Ref": "AWS::Region"}, "\n",
                  "interval=1", "\n"
                ]]},
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {"Fn::Join": ["", [
                  "[cfn-auto-reloader-hook]", "\n",
                  "triggers=post.update", "\n",
                  "path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init", "\n",
                  "action=/opt/aws/bin/cfn-init --verbose --stack=", {"Ref": "AWS::StackName"}, " --region=", {"Ref": "AWS::Region"}, " --resource=LaunchConfiguration", "\n",
                  "runas=root", "\n"
                ]]}
              }
            },
            "services": {
              "sysvinit": {
                "awslogs": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "packages": {
                    "yum": ["awslogs"]
                  },
                  "files": [
                    "/etc/awslogs/awslogs.conf",
                    "/etc/awslogs/awscli.conf"
                  ]
                },
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "AssociatePublicIpAddress": true,
        "EbsOptimized": false,
        "IamInstanceProfile": {"Ref": "InstanceProfile"},
        "ImageId": {"Fn::FindInMap": ["RegionMap", {"Ref": "AWS::Region"}, "AMI"]},
        "InstanceType": {"Ref": "InstanceType"},
        "BlockDeviceMappings": [{ "DeviceName": "/dev/xvda", "Ebs" : {"VolumeSize": "10", "VolumeType": "gp2", "DeleteOnTermination": true} }],           
        "SecurityGroups": [{"Ref": "SecurityGroup"}],
        "KeyName": {"Fn::If": ["HasKeyPair", {"Ref": "eKeyPair"}, {"Ref": "AWS::NoValue"}]},
        "UserData": { "Fn::Base64": { "Fn::Join": ["", [
          "#!/bin/bash -x", "\n",
          "fallocate -l 2G /swapfile\n",
          "chmod 600 /swapfile\n",
          "mkswap /swapfile\n",
          "swapon /swapfile\n",
          "echo '/swapfile none swap sw 0 0' >> /etc/fstab\n",
          
          "yum clean all -y\n",
          "yum update -y\n",
          "yum update kernel -y\n",  

          
          "touch /var/log/crontab.log\n",
          "chmod 744 /var/log/crontab.log\n",
          "echo '0 0,6,12,18 * * * yum update -y --security >/var/log/crontab.log 2>&1' > /tmp/crontab_ec2\n", 
          "echo '30 1 * * * /sbin/shutdown -r now >/var/log/crontab.log 2>&1' >> /tmp/crontab_ec2\n",
          "crontab /tmp/crontab_ec2\n",      
          "rm -f /tmp/crontab_ec2\n",    
          
          "echo Set INSTANCEID and REGION \n",    
          "INSTANCEID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)", "\n",
          "REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed -e 's/.$//')", "\n",
          "SPECIFICATIONS_JSON=\"[{\\\"InstanceId\\\":\\\"${INSTANCEID}\\\",\\\"CpuCredits\\\":\\\"unlimited\\\"}]\"", "\n",

          "echo INSTANCEID ${INSTANCEID}\n",    
          "echo REGION ${REGION}\n",    
          "echo SPECIFICATIONS_JSON  ${SPECIFICATIONS_JSON}\n",    
          
          "\necho Assign a fixed EIP\n",    
          "aws --region ", {"Ref": "AWS::Region"}, " ec2 associate-address --instance-id $INSTANCEID --allocation-id ", {"Fn::GetAtt": ["EIP" , "AllocationId"]},
            " && /opt/aws/bin/cfn-init -v --stack ", {"Ref": "AWS::StackName"}, " --resource LaunchConfiguration --region ", {"Ref": "AWS::Region"}, "\n",
          "/opt/aws/bin/cfn-signal -e $? --stack ", {"Ref": "AWS::StackName"}, " --resource AutoScalingGroup --region ", {"Ref": "AWS::Region"}, "\n",
          
          "echo If reqeusted; set the CPU Unlimited option \n",    
          {"Fn::If": ["setCpuUnlimited",
            "aws --region ${REGION} ec2 modify-instance-credit-specification --instance-credit-specification ${SPECIFICATIONS_JSON}\n",
             "echo CPU Unlimited NOT requested/set\n" 
          ]}, 
          "echo CPU Unlimited SET to: \n",
          "aws --region ${REGION} ec2 describe-instance-credit-specifications --instance-id ${INSTANCEID}\n",

          {"Fn::If": ["disableSudo", "echo DISABLE sudo\n sudo rm -f /etc/sudoers.d/cloud-init\n", "echo sudo is NOT disabled !!!!!\n" ]},
          "\necho UserData update done.\n"
                    
        ]]}}
      }
    },
    
    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": [ "LaunchConfiguration", "SNSNotificationEmail" ],
      "CreationPolicy": {
        "ResourceSignal": { "Count": 1,  "Timeout": "PT10M" }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "PauseTime": "PT10M",
          "WaitOnResourceSignals": "true"
        }
      },
      "Properties": {
        "AvailabilityZones": { "Fn::GetAZs": {"Ref": "AWS::Region"} },
        "VPCZoneIdentifier": [
          {"Fn::ImportValue" : {"Fn::Join" : [ "-", [ {"Ref" : "aEnvironmentType"}, "PublicSubnet1a", {"Ref":"classB"}]]}},
          {"Fn::ImportValue" : {"Fn::Join" : [ "-", [ {"Ref" : "aEnvironmentType"}, "PublicSubnet1b", {"Ref":"classB"}]]}},
          {"Fn::ImportValue" : {"Fn::Join" : [ "-", [ {"Ref" : "aEnvironmentType"}, "PublicSubnet1c", {"Ref":"classB"}]]}},
          {"Fn::ImportValue" : {"Fn::Join" : [ "-", [ {"Ref" : "aEnvironmentType"}, "PublicSubnet1d", {"Ref":"classB"}]]}},
          {"Fn::ImportValue" : {"Fn::Join" : [ "-", [ {"Ref" : "aEnvironmentType"}, "PublicSubnet1e", {"Ref":"classB"}]]}}
        ],
        "LaunchConfigurationName": { "Ref": "LaunchConfiguration" },
        "MinSize": "1",
        "MaxSize": "1",
        "DesiredCapacity": "1",
        "HealthCheckType": "EC2",
        "NotificationConfigurations": [ {
            "TopicARN": { "Ref": "SNSNotificationEmail" },
            "NotificationTypes": [
              "autoscaling:EC2_INSTANCE_LAUNCH",
              "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
              "autoscaling:EC2_INSTANCE_TERMINATE",
              "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
            ]
        } ],        
        "Tags": [
          { "Key": "Name", "Value": {"Fn::Join": [ " ", [{"Ref": "aEnvironmentType"}, "SSH Bastion Host", {"Ref": "classB"}]]} , "PropagateAtLaunch": "true"},
          { "Key": "Application", "Value": {"Ref": "AWS::StackName"}, "PropagateAtLaunch": "true" },
          { "Key": "Owner","Value": "AutoscaleGroup", "PropagateAtLaunch": "true" }
        ]
      }
    },
    
    "SNSNotificationEmail": {
        "Type": "AWS::SNS::Topic",
        "Properties": {
            "Subscription": [ 
             { "Endpoint": {"Ref": "yEmailAdres"},  "Protocol": "email"}
            ]
        }
    }
    
    
  },
  
  
  "Outputs": {
  
    "SSHBastionSecurityGroup": {
      "Description": "Use this Security Group to reference incoming traffic from the SSH Bastion Host.",
      "Value": {"Ref": "SecurityGroup"},
      "Export": {
        "Name" : {"Fn::Join" : [ "-", [{"Ref": "aEnvironmentType"}, "BastionSecurityGroup", {"Ref": "classB"}]]}
      }
    },
    
    "SSHBastionIPAddress": {
      "Description": "The public IP address of the SSH Bastion Host.",
      "Value": {"Ref": "EIP"},
      "Export": {
        "Name" : {"Fn::Join" : [ "-", [{"Ref": "aEnvironmentType"}, "BastionIPAddress", {"Ref": "classB"}]]}
      }
    }
    
  }
  
}